Query {
  _mongooseOptions: { populate: { User: [Object], Vehicle: [Object] } },
  mongooseCollection: 
   NativeCollection {
     collection: Collection { s: [Object] },
     opts: 
      { bufferCommands: true,
        capped: false,
        '$wasForceClosed': undefined },
     name: 'budgets',
     collectionName: 'budgets',
     conn: 
      NativeConnection {
        base: [Object],
        collections: [Object],
        models: [Object],
        config: [Object],
        replica: false,
        hosts: null,
        host: 'localhost',
        port: 27017,
        user: null,
        pass: null,
        name: 'acroride_test',
        options: null,
        otherDbs: [],
        states: [Object],
        _readyState: 1,
        _closeCalled: false,
        _hasOpened: true,
        _listening: false,
        _connectionOptions: {},
        db: [Object] },
     queue: [],
     buffer: false,
     emitter: 
      EventEmitter {
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined } },
  model: 
   { [Function: model]
     hooks: Kareem { _pres: {}, _posts: {} },
     base: 
      Mongoose {
        connections: [Array],
        models: [Object],
        modelSchemas: [Object],
        options: [Object],
        plugins: [Array] },
     modelName: 'budget',
     model: [Function: model],
     db: 
      NativeConnection {
        base: [Object],
        collections: [Object],
        models: [Object],
        config: [Object],
        replica: false,
        hosts: null,
        host: 'localhost',
        port: 27017,
        user: null,
        pass: null,
        name: 'acroride_test',
        options: null,
        otherDbs: [],
        states: [Object],
        _readyState: 1,
        _closeCalled: false,
        _hasOpened: true,
        _listening: false,
        _connectionOptions: {},
        db: [Object] },
     discriminators: undefined,
     '$appliedMethods': true,
     '$appliedHooks': true,
     _events: { init: [Function], save: [Function] },
     _eventsCount: 2,
     schema: 
      Schema {
        obj: [Object],
        paths: [Object],
        aliases: {},
        subpaths: [Object],
        virtuals: [Object],
        singleNestedPaths: {},
        nested: [Object],
        inherits: {},
        callQueue: [Array],
        _indexes: [],
        methods: {},
        statics: {},
        tree: [Object],
        query: {},
        childSchemas: [],
        plugins: [Array],
        s: [Object],
        options: [Object],
        '$globalPluginsApplied': true,
        _requiredpaths: [],
        _indexedpaths: [] },
     collection: 
      NativeCollection {
        collection: [Object],
        opts: [Object],
        name: 'budgets',
        collectionName: 'budgets',
        conn: [Object],
        queue: [],
        buffer: false,
        emitter: [Object] },
     Query: { [Function] base: [Object] },
     '$__insertMany': [Function],
     insertMany: [Function],
     '$init': Promise { [Object] } },
  schema: 
   Schema {
     obj: 
      { finalTotalCost: [Object],
        budgetTotalCost: [Object],
        destinoInicial: [Function: String],
        destinoFinal: [Function: String],
        tiempoAproximado: [Function: Number],
        distancia: [Function: Number],
        tollCost: [Function: Number],
        tolls: [Array],
        budgetDate: [Function: Date],
        aprove: [Function: Boolean],
        User: [Object],
        Vehicle: [Object] },
     paths: 
      { 'finalTotalCost.es': [Object],
        'finalTotalCost.en': [Object],
        'budgetTotalCost.es': [Object],
        'budgetTotalCost.en': [Object],
        destinoInicial: [Object],
        destinoFinal: [Object],
        tiempoAproximado: [Object],
        distancia: [Object],
        tollCost: [Object],
        tolls: [Object],
        budgetDate: [Object],
        aprove: [Object],
        User: [Object],
        Vehicle: [Object],
        _id: [Object],
        __v: [Object] },
     aliases: {},
     subpaths: 
      { 'tolls.0': [Object],
        'tolls.1': [Object],
        'tolls.2': [Object],
        'tolls.3': [Object] },
     virtuals: { id: [Object] },
     singleNestedPaths: {},
     nested: { finalTotalCost: true, budgetTotalCost: true },
     inherits: {},
     callQueue: [ [Array], [Array], [Array], [Array], [Array], [Array] ],
     _indexes: [],
     methods: {},
     statics: {},
     tree: 
      { finalTotalCost: [Object],
        budgetTotalCost: [Object],
        destinoInicial: [Function: String],
        destinoFinal: [Function: String],
        tiempoAproximado: [Function: Number],
        distancia: [Function: Number],
        tollCost: [Function: Number],
        tolls: [Array],
        budgetDate: [Function: Date],
        aprove: [Function: Boolean],
        User: [Object],
        Vehicle: [Object],
        _id: [Object],
        __v: [Function: Number],
        id: [Object] },
     query: {},
     childSchemas: [],
     plugins: [ [Object], [Object], [Object], [Object] ],
     s: { hooks: [Object], kareemHooks: [Object] },
     options: 
      { retainKeyOrder: false,
        typeKey: 'type',
        id: true,
        noVirtualId: false,
        _id: true,
        noId: false,
        validateBeforeSave: true,
        read: null,
        shardKey: null,
        autoIndex: null,
        minimize: true,
        discriminatorKey: '__t',
        versionKey: '__v',
        capped: false,
        bufferCommands: true,
        strict: true,
        pluralization: true },
     '$globalPluginsApplied': true,
     _requiredpaths: [],
     _indexedpaths: [] },
  op: 'findOne',
  options: { retainKeyOrder: false },
  _conditions: { _id: 59fbd51ad9c61e02745c5a95 },
  _fields: undefined,
  _update: undefined,
  _path: undefined,
  _distinct: undefined,
  _collection: 
   NodeCollection {
     collection: 
      NativeCollection {
        collection: [Object],
        opts: [Object],
        name: 'budgets',
        collectionName: 'budgets',
        conn: [Object],
        queue: [],
        buffer: false,
        emitter: [Object] },
     collectionName: 'budgets' },
  _traceFunction: undefined,
  _count: [Function],
  _execUpdate: [Function],
  _find: [Function],
  _findOne: [Function],
  _findOneAndRemove: [Function],
  _findOneAndUpdate: [Function],
  _replaceOne: [Function],
  _updateMany: [Function],
  _updateOne: [Function],
  _error: null }